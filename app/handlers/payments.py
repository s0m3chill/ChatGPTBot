import config

from core import bot, DataStorage
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.types.message import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

async def select_price(message: types.Message):
    config.CHAT_ID = message.chat.id
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="3 (100–≥—Ä–Ω)", callback_data="price_3_100"),
        InlineKeyboardButton(text="5 (150–≥—Ä–Ω)", callback_data="price_5_150"),
        InlineKeyboardButton(text="10 (200–≥—Ä–Ω)", callback_data="price_10_200"),
    )
    await bot.send_message(
        message.chat.id,
        "–°–∫—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫—É–ø–∏—Ç–∏:",
        reply_markup=keyboard
    )

async def confirm_payment(callback_query: types.CallbackQuery):
    answers = int(callback_query.data.split("_")[1])
    price = int(callback_query.data.split("_")[2])
    buy_price = price * 100
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{buy_price}"),
        InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel"),
    )
    await bot.send_message(
        callback_query.from_user.id,
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ–∫—É–ø–∫—É {answers} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞ {price} –≥—Ä–∏–≤–µ–Ω—å:",
        reply_markup=keyboard
    )

async def cancel_payment(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–û–ø–ª–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    )

# request for invoice
async def buy(callback_query: types.CallbackQuery):
    buy_price = int(callback_query.data.split("_")[1])

    if config.PAYMENT_TOKEN.split(":")[1] == 'TEST':
        await bot.send_message(config.CHAT_ID, "Test payment!")
    await bot.send_message(config.CHAT_ID,
                           "–ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏"
                           "\n\n–¶–µ –≤–∞—à —ñ–Ω–≤–æ–π—Å:", parse_mode='Markdown')
    await bot.send_invoice(
        config.CHAT_ID,
        title="–ö—É–ø–∏—Ç–∏",
        description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–æ—Ç–∞",
        provider_token=config.PAYMENT_TOKEN,
        currency="uah",
        photo_url="https://telegra.ph/file/d08ff863531f10bf2ea4b.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False, # we don't need shipping fee
        prices=[types.LabeledPrice(label="–ö—É–ø–∏—Ç–∏", amount=buy_price)],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload"
    )

# pre checkout (10 seconds to answer)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, 
                                        ok=True,
                                        error_message="–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫")

# payment completion
async def successful_payment(message: types.Message):
    print("–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞:")
    payment_info = message.successful_payment.to_python()
    for key, value in payment_info.items():
        print(f"{key} = {value}")
    questions_counter = DataStorage.getQuestions(message.from_user.id) + config.QUESTIONS_COUNT
    DataStorage.updateQuestions(message.from_user.id, questions_counter)
    await bot.send_message(message.chat.id, f"–û–ø–ª–∞—Ç–∞ –ø–æ —Å—É–º—ñ {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ–π—à–ª–∞")

def register_handlers_payments(dp: Dispatcher):
    dp.register_message_handler(select_price, Text('–ö—É–ø–∏—Ç–∏ üí∏'))
    dp.register_callback_query_handler(confirm_payment, lambda c: c.data and c.data.startswith('price'))
    dp.register_callback_query_handler(cancel_payment, lambda c: c.data == 'cancel')
    dp.register_callback_query_handler(buy, lambda c: c.data and c.data.startswith('confirm'))
    dp.register_pre_checkout_query_handler(pre_checkout_query, lambda query: True)
    dp.register_message_handler(successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)