import config
import app.util.referrals
import app.util.db
from app.keyboards.default import general_menu

# setup
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text

from core import bot, DataStorage

async def cmd_start(message: types.Message):
    # Check if the message contains the referral parameter
    referral_user_id = app.util.referrals.decode_payload(message.get_args())
    if referral_user_id and referral_user_id != -1:
        referral_user_id = int(referral_user_id.split("_")[-1])
        # Check if the user is using own referral link
        if int(referral_user_id) == message.from_user.id:
            await message.reply('–ê–Ω—É –Ω–µ —á—ñ—Ç–µ—Ä–∏—Ç–∏! –°–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É –Ω–µ –º–æ–∂–Ω–∞ —é–∑–∞—Ç–∏!')
        # Check if user was already referred
        elif DataStorage.checkUserInDB(message.from_user.id):
            await message.reply("–¶—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ –≤–∂–µ –±—É–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞.")
        else:
            #add user to the db
            DataStorage.createUser(message.from_user.id)
            # Increment the referral counter for the user who referred someone
            referrals_counter = DataStorage.getReferrals(referral_user_id) + 1
            DataStorage.updateReferrals(referral_user_id, referrals_counter)

            # Check if the referral count has reached config.QUESTIONS_COUNT and send congratulations message
            if referrals_counter == config.REFERRALS_NEEDED:
                DataStorage.updateReferrals(referral_user_id,0)
                questions_counter = DataStorage.getQuestions(referral_user_id) + 1
                DataStorage.updateQuestions(referral_user_id, questions_counter)
                await bot.send_message(int(referral_user_id), f"–í—ñ—Ç–∞—é! {config.REFERRALS_NEEDED} –ª—é–¥–µ–π –¥–æ–ª—É—á–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
    await bot.send_message(message.chat.id,
                           "–ü—Ä–∏–≤—ñ—Ç, —è –¥–æ–ø–æ–º–∞–≥–∞—é –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —Å–µ—Å—ñ—é —Ç–∞ –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è)\n"
                           f"–ö–æ–∂–Ω—ñ 100 –≥—Ä–∏–≤–µ–Ω—å –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ {config.QUESTIONS_COUNT} –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
                           f"–¢–∞–∫–æ–∂ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è 1 –±–µ–∑–∫–æ—à—Ç–æ–≤–æ–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Å—Ç–≤–æ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—ñ—à–ª–∏ –π–æ–≥–æ {config.REFERRALS_NEEDED} –¥—Ä—É–∑—è–º. –ü—ñ—Å–ª—è —ó—Ö–Ω—å–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n"
                           , reply_markup=general_menu())

async def process_terms_handlers(message: types.Message):
    await bot.send_message(message.chat.id,
                           f"–ö–æ–∂–Ω—ñ 100 –≥—Ä–∏–≤–µ–Ω—å –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ {config.QUESTIONS_COUNT} –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
                           f"–¢–∞–∫–æ–∂ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è 1 –±–µ–∑–∫–æ—à—Ç–æ–≤–æ–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Å—Ç–≤–æ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—ñ—à–ª–∏ –π–æ–≥–æ {config.REFERRALS_NEEDED} –¥—Ä—É–∑—è–º. –ü—ñ—Å–ª—è —ó—Ö–Ω—å–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n")

async def check_questions_handler(message: types.Message):
    # Get the referral count for the user
    count = DataStorage.getQuestions(message.from_user.id)
    # Send the referral count to the user
    await bot.send_message(
        message.chat.id,
        f"–ó–∞–ª–∏—à–∏–ª–æ—Å—è {count} –ø–∏—Ç–∞–Ω—å"
    )

async def refferal_link_handler(message: types.Message):
    user_id = app.util.referrals.encode_payload(message.from_user.id)
    referral_link = f'<a href="tg://resolve?domain=asjhdkaksjbot&start={user_id}">–ö–ª—ñ–Ω–∫–∏ —Å—é–¥–∏, —â–æ–± —Å—Ç–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</a>'

    # Send the referral link to the user
    await bot.send_message(
        message.chat.id,
        "–ü–µ—Ä–µ—à–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥—Ä—É–∑—è–º,–∞–±–∏ –≤–æ–Ω–∏ —Å—Ç–∞–ª–∏ —Ç–≤–æ—ó–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:\n" + referral_link,
        parse_mode='HTML'
    )

async def check_referrals_handler(message: types.Message):
    # Get the referral count for the user
    count = DataStorage.getReferrals(message.from_user.id)
    if count == 1:
        # Send the referral count to the user
        await bot.send_message(
            message.chat.id,
            f"{count} –ª—é–¥–∏–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∞ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
        )
    elif count == 2 or count ==3 or count == 4:
        await bot.send_message(
            message.chat.id,
            f"{count} –ª—é–¥–∏–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
        )
    else:
        await bot.send_message(
            message.chat.id,
            f"{count} –ª—é–¥–µ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
        )

# register all handlers
def register_handlers_common(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(process_terms_handlers, Text('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ‚ÑπÔ∏è'))
    dp.register_message_handler(check_questions_handler, Text('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ü§ì'))
    dp.register_message_handler(refferal_link_handler, Text('–†–µ—Ñ–µ—Ä–∞–ª–∫–∞ üîó'))
    dp.register_message_handler(check_referrals_handler, Text('–ó–∞–ø—Ä–æ—à–µ–Ω—ñ –¥—Ä—É–∑—ñ üëØ‚Äç‚ôÄÔ∏è'))